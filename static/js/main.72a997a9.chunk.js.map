{"version":3,"sources":["serviceWorker.js","index.js","class.js","CoursesStore.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","CoursesStore","require","ScheduleApp","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","makeSchedules","bind","assertThisInitialized","prepareSchedule","schedules","blocks","classes","classTimes","numOfBlocks","getBlocks","length","reservedBlocks","i","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","c","value","offeredBlocks","includes","block","push","possibleBlocks","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","classesInBlock","err","return","blocksPossibleClasses","possibleSchedules","map","val","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","aClass","removals","n","m","indexOf","splice","noSchedule","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","partialPossibleSchedules","slice","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","partialSchedule","concat","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","entries","_blocksPossibleClasse","_ref3","_ref2","slicedToArray","el","apply","toConsumableArray","_this2","react_default","a","createElement","Fragment","Navbar_default","bg","Brand","Tabs_default","onSelect","key","getCourses","setState","Tab_default","eventKey","title","src_CourseInput","courses","scheduleApp","src_ScheduleDisplay","React","Component","ScheduleDisplay","data","columns","errorAlert","Alert_default","variant","Heading","isNaN","_loop","id","Header","style","borderRight","accessor","d","name","es","padding","className","defaultSorted","desc","filterable","SubComponent","row","flex","width","maxWidth","wordWrap","original","index","teacher","CourseInput","_this3","onAddRemove","handleChange","subscribeAddRemove","nextProps","nextState","event","parseInt","target","changeBlocks","forceUpdate","appInstance","Form_default","Group","controlId","Label","Control","getInputValue","onChange","type","min","ListGroup_default","course","src_CourseInputRow","CourseInputRow","_this4","addCourse","removeCourse","onCourseUpdate","onBlockUpdate","clone","updateCourse","defineProperty","newCourse","arr1","arr2","arraysEqual","newBlocks","subscribeUpdate","subscribeBlocksChange","unsubscribeUpdate","unsubscribeBlocksChange","_this5","Item","placeholder","ButtonGroup_default","marginRight","paddingBottom","Dropdown_default","Toggle","Menu","ToggleButtonGroup_default","vertical","Array","fill","_","index2","ToggleButton_default","Button_default","onClick","ReactDOM","render","src_ScheduleApp","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker","Class","arguments","E_iansw_Repos_schedule_maker_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","module","exports","emitter","EventEmitter","ids","callback","addListener","removeListener","newValues","prop","emit","unsubscribeAddRemove","coursesCopy"],"mappings":"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","file":"static/js/main.72a997a9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\n//import Table from \"react-bootstrap/Table\";\r\n\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\n//import DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\r\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\";\r\nimport Tabs from \"react-bootstrap/Tabs\";\r\nimport Tab from \"react-bootstrap/Tab\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Form from \"react-bootstrap/Form\";\r\n// import Row from \"react-bootstrap/Row\";\r\n// import Col from \"react-bootstrap/Col\";\r\n\r\n//Import react-table\r\nimport ReactTable from \"react-table\";\r\n// import \"react-table/react-table.css\";\r\n\r\nimport \"./index.css\";\r\n// import \"./schedule.js\";\r\n\r\n//import service worker for progressive web app\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n//Datastore\r\nconst CoursesStore = require(\"./CoursesStore.js\");\r\n\r\nconst Class = require(\"./class.js\");\r\n\r\n\r\n\r\n\r\nclass ScheduleApp extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.makeSchedules = this.makeSchedules.bind(this);\r\n        this.prepareSchedule = this.prepareSchedule.bind(this);\r\n        // this.ids = 0;\r\n\r\n        //to remove\r\n        this.state = {\r\n            schedules: [],\r\n            // courses: [new Class(\"A\", \"A\", [0, 3], this.ids++), new Class(\"B\", \"B\", [0, 2, 3], this.ids++), new Class(\"C\", \"C\", [0, 1], this.ids++), new Class(\"D\", \"D\", [2, 3], this.ids++)],\r\n            blocks: 4,\r\n            //reservedBlocks: []\r\n            //make use of reservedBlocks to increase efficiency\r\n        };\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    prepareSchedule(classes) {\r\n        //Prepare schedules\r\n        let classTimes = [];\r\n        let numOfBlocks = CoursesStore.getBlocks();\r\n        classTimes.length = numOfBlocks;\r\n\r\n        let reservedBlocks = [];\r\n\r\n        //need to manually fill it\r\n        for (let i = 0; i < numOfBlocks; ++i) {\r\n            classTimes[i] = [];\r\n        }\r\n\r\n        for (let c of classes) {\r\n            if (c.offeredBlocks.length < 2) {\r\n                //Two classes only available at same time\r\n                if (reservedBlocks.includes(c.offeredBlocks[0])) {\r\n                    //Add handle error \r\n                    // console.log(\"No possible schedule\");\r\n                    break;\r\n                }\r\n\r\n                let block = c.offeredBlocks[0];\r\n                reservedBlocks.push(block);\r\n\r\n                //possibleBlocks currently not used\r\n                c.possibleBlocks.push(block);\r\n            }\r\n\r\n            for (let block of c.offeredBlocks) {\r\n                // console.log(block);\r\n                if (!reservedBlocks.includes(block)) {\r\n                    c.possibleBlocks.push(block);\r\n                }\r\n\r\n                let classesInBlock = classTimes[block];\r\n\r\n                if (classesInBlock !== undefined) {\r\n                    classesInBlock.push(c);\r\n                }\r\n            }\r\n        }\r\n\r\n        /* for (let classes of classTimes) {\r\n            //if one block has only one class available, \r\n            if (classes.length < 2) {\r\n\r\n            }\r\n        } */\r\n\r\n        // console.log(classTimes);\r\n        return classTimes;\r\n    }\r\n\r\n    makeSchedules(blocksPossibleClasses) {\r\n\r\n        let possibleSchedules = [];\r\n\r\n        //if only one block in blocksArray, then have reached end of recursion. Return values.\r\n        if (blocksPossibleClasses.length < 2) {\r\n\r\n            //Create array with each class in a separate index\r\n            return blocksPossibleClasses[0].map(val => [val]);\r\n        }\r\n        else {\r\n            for (let aClass of blocksPossibleClasses[0]) {\r\n\r\n                //nested array of removals from each block in blocksPossibleClasses\r\n                let removals = [];\r\n                removals.length = blocksPossibleClasses.length;\r\n                for (let i = 0, n = blocksPossibleClasses.length; i < n; ++i) {\r\n                    removals[i] = [];\r\n                }\r\n\r\n                let classPossibleSchedules = [];\r\n\r\n                //make deep copy of blocksPossibleClasses\r\n                //let tempPossibleSchedules = JSON.parse(JSON.stringify(blocksPossibleClasses));\r\n\r\n                //for each block, remove all occurances of the current class in the current block\r\n                //skipping current block.\r\n                for (let i = 1, n = blocksPossibleClasses.length; i < n; ++i) {\r\n                    let m;\r\n                    while ((m = blocksPossibleClasses[i].indexOf(aClass)) !== -1) {\r\n                        removals[i].push(aClass);\r\n                        blocksPossibleClasses[i].splice(m, 1);\r\n                    }\r\n                }\r\n\r\n                //flag for whether shedule is impossible with the current class\r\n                let noSchedule = false;\r\n                for (let block of blocksPossibleClasses) {\r\n                    if (block.length < 1) {\r\n                        noSchedule = true;\r\n                        // break;\r\n                    }\r\n                }\r\n\r\n                if (noSchedule) {\r\n                }\r\n                else {\r\n                    let partialPossibleSchedules = this.makeSchedules(blocksPossibleClasses.slice(1));\r\n\r\n                    //iterate through the returned possible schedules\r\n                    for (let partialSchedule of partialPossibleSchedules) {\r\n                        possibleSchedules.push([aClass].concat(partialSchedule));\r\n                    }\r\n\r\n\r\n\r\n                    //possibleSchedules.push(makeSchedules(blocksPossibleClasses.slice(1), currSchedule.push(block)));\r\n                }\r\n\r\n                //add back in the removed classes\r\n                for (const [i, el] of removals.entries()) {\r\n                        //need to modify original blocksPossibleClasses\r\n\r\n                        //blocksPossibleClasses[i] = blocksPossibleClasses[i].concat(el);\r\n                        blocksPossibleClasses[i].push(...el);                    \r\n                }\r\n                removals = [];\r\n            }\r\n            return possibleSchedules;\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.state.courses);\r\n        return (\r\n            //later: add Tab to switch between output and input\r\n            //<ScheduleDisplay schedules={this.state.schedules} />\r\n            <>\r\n                <Navbar bg=\"light\">\r\n                    <Navbar.Brand>Schedule Maker</Navbar.Brand>\r\n                </Navbar>\r\n                <Tabs\r\n                    onSelect={(key) => {\r\n                        if (key === \"output\") {\r\n                            let classes = this.prepareSchedule(CoursesStore.getCourses());\r\n                            // console.log(classes);\r\n                            let schedules = this.makeSchedules(classes);\r\n\r\n\r\n                            // this.setState({\r\n                            //     schedules: this.makeSchedules(classes)\r\n                            // });\r\n\r\n                            // console.log(schedules);\r\n\r\n                            this.setState({\r\n                                schedules\r\n                            })\r\n                        }\r\n                    }}\r\n                >\r\n                    <Tab eventKey=\"input\" title=\"Input\">\r\n                        <CourseInput courses={this.state.courses} scheduleApp={this} />\r\n                    </Tab>\r\n                    <Tab eventKey=\"output\" title=\"Output\">\r\n                        <ScheduleDisplay schedules={this.state.schedules} scheduleApp={this} />\r\n                    </Tab>\r\n                </Tabs>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n/* function ScheduleRow(props) {\r\n    return (\r\n        <>\r\n            {console.log(props)}\r\n            {global.schedules.map(element => (\r\n                <td>\r\n                    {element[props.block].name}\r\n                </td>\r\n            ))}\r\n        </>\r\n    )\r\n} */\r\n\r\nclass ScheduleDisplay extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        //let headerArray = [];\r\n\r\n        //create table headers\r\n        /* for (let i = 0; i < global.numOfBlocks; ++i) {\r\n            headerArray.push(\r\n                <div>{i}</div>\r\n            );\r\n        } */\r\n\r\n        /* let tableHeaderArray = new Array(global.numOfBlocks).fill(null);\r\n        //create table headers\r\n        for (let i = 0; i < global.numOfBlocks; ++i) {\r\n            tableHeaderArray.push(\r\n                <tr>\r\n                    <th class=\"header\">{i}</th>\r\n                    <ScheduleRow block={i} />\r\n                </tr>\r\n            );\r\n        } */\r\n\r\n\r\n        /* let tempColumns = [];\r\n        for (let i = 1; i < global.numOfBlocks; ++i) {\r\n            //add column header for each block\r\n            tempColumns.push({\r\n                id: \"block\" + i,\r\n                Header: \"\",\r\n                accessor: d => d[i]\r\n            });\r\n        } */\r\n\r\n        /* function processData(data) {\r\n            let tempData = [];\r\n\r\n            for (let i = 0; i < global.numOfBlocks; ++i) {\r\n                //add block number beginning to each row\r\n                tempData.push([i + 1]);\r\n            }\r\n\r\n\r\n            for (let schedule of data) {\r\n                for (let [index, course] of schedule.entries()) {\r\n                    tempData[index].push(course.name);\r\n                }\r\n            }\r\n\r\n            return tempData;\r\n        } */\r\n\r\n\r\n\r\n        const data = this.props.schedules;\r\n        const appInstance = this.props.scheduleApp;\r\n\r\n        let columns = [];\r\n\r\n        const blocks = CoursesStore.getBlocks();\r\n\r\n        let errorAlert = (\r\n            <Alert variant=\"danger\">\r\n                <Alert.Heading>Unable to create schedule</Alert.Heading>\r\n                <p>Make sure you have at least {blocks} classes. There are no possible schedules from your classes. If you believe this is a mistake, please contact me at [CONTACT]</p>\r\n            </Alert>\r\n        );\r\n\r\n        if (isNaN(blocks)) {\r\n            return errorAlert;\r\n        }\r\n\r\n        for (let i = 0; i < blocks; ++i) {\r\n            columns.push(\r\n                /* {\r\n                    Header: \"Block \" + (i + 1),\r\n                    id: \"block\" + (i + 1),\r\n                    // accessor: d => d[i].name,\r\n                    columns: [{\r\n                        id: \"class\" + (i + 1),\r\n                        Header: \"Class\",\r\n                        accessor: d => d[i].name\r\n                    },\r\n                    {\r\n                        id: \"teacher\" + (i + 1),\r\n                        Header: \"Teacher\",\r\n                        style: {borderRight: \"1px solid rgba(0, 0, 0, 0.2\"},\r\n                        aggregate: (values, rows) => values.length,\r\n                        Aggregated: row => {\r\n                            return (\r\n                                <span>\r\n                                    ({row.value})\r\n                                </span>\r\n                            )\r\n                        },\r\n                        accessor: d => d[i].teacher\r\n                    }]\r\n                } */\r\n                {\r\n                    id: \"class\" + (i + 1),\r\n                    Header: \"Block \" + (i + 1),\r\n                    style: {borderRight: \"1px solid rgba(0, 0, 0, 0.2\"},\r\n                    accessor: d => d[i].name\r\n                }\r\n            )\r\n        }\r\n\r\n\r\n        /* const columns = [{\r\n            Header: \"\",\r\n            fixed: \"left\",\r\n            columns: [\r\n                {\r\n                    id: \"header\",\r\n                    Header: \"Block\",\r\n                    width: 80,\r\n                    accessor: d => d[0]\r\n                }\r\n            ]\r\n        }].concat({Header:\"Classes\",\r\n            headerClassName: \"classes-header-group\",\r\n            columns: tempColumns}); */\r\n\r\n\r\n        const DEFAULT_SORT = [\r\n            {\r\n                id: \"block1\",\r\n                desc: false\r\n            }\r\n        ];\r\n\r\n        if (data.length < 1) {\r\n            return errorAlert;\r\n        }\r\n        else {\r\n            return (\r\n                <ReactTable\r\n                    style={{ padding: \"10px\"}}\r\n                    data={data}\r\n                    columns={columns}\r\n                    className=\"-striped -highlight\"\r\n                    defaultSorted={DEFAULT_SORT}\r\n                    filterable={true}\r\n                    SubComponent={row => {\r\n                        return (\r\n                            <div className=\"rt-tr\">\r\n                            <div className=\"rt-td\" style={{flex: \"35 0 auto\", width: \"35px\", maxWidth: \"35px\", wordWrap: \"break-word\"}}>Teacher</div>\r\n                                {row.original.map((val , index) =>\r\n                                    <div key={index} className=\"rt-td\" style={{flex: \"100 0 auto\", width: \"100px\"}}>{val.teacher}</div>\r\n                                )}\r\n                            </div>\r\n                        )\r\n                    }}\r\n                />\r\n            )\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        /* return (\r\n            <>\r\n            <div class=\"header\">\r\n                {headerArray}\r\n            </div>\r\n            {global.schedules.map(element => (\r\n            <div class=\"schedule\">\r\n                <Schedule classes={element}></Schedule>\r\n            </div>))}\r\n            </>\r\n        ) */\r\n\r\n\r\n        /* return (\r\n            <div class=\"tableContainer\">\r\n                <Table striped hover>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th class=\"header\">Block</th>\r\n                            <td class=\"invisibleHeader\">B</td>\r\n                            <td></td>\r\n                            <td></td>\r\n                        </tr>\r\n                        {tableHeaderArray}\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        ) */\r\n\r\n\r\n    }\r\n}\r\n\r\nclass CourseInput extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // this.addCourse = this.addCourse.bind(this);\r\n        // this.removeCourse = this.removeCourse.bind(this);\r\n        this.state = {\r\n            courses: CoursesStore.getCourses()\r\n        };\r\n        this.onAddRemove = this.onAddRemove.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    onAddRemove() {\r\n        this.setState({\r\n            courses: CoursesStore.getCourses()\r\n        });\r\n    }\r\n \r\n    componentWillMount() {\r\n        CoursesStore.subscribeAddRemove(this.onAddRemove);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (nextState.courses.length !== this.state.courses.length) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    handleChange(event) {\r\n        let newValue = parseInt(event.target.value);\r\n        CoursesStore.changeBlocks(parseInt(event.target.value));\r\n        this.forceUpdate();\r\n    }\r\n\r\n    getInputValue() {\r\n        let n;\r\n        if (isNaN((n = CoursesStore.getBlocks()))) {\r\n                return \"\";\r\n        }\r\n        return n;\r\n    }\r\n\r\n    /* addCourse(index, appInstance) {\r\n        appInstance.setState({\r\n            courses: appInstance.state.courses.slice(0, index + 1).concat(new Class(\"\", \"\", [], appInstance.ids++), appInstance.state.courses.slice(index + 1, appInstance.state.courses.length))\r\n        });\r\n    }\r\n\r\n    /*removeCourse(index, appInstance) {\r\n        let newCourses = appInstance.state.courses.slice();\r\n        newCourses.splice(index, 1);\r\n        //console.log(index);\r\n        appInstance.setState({\r\n            courses: newCourses\r\n        });\r\n    }\r\n\r\n    handleOnChange(event, index, appInstance) {\r\n\r\n        let propName = event.target.name;\r\n        let value = appInstance.state.courses.slice();\r\n        value[index][propName] = event.target.value;\r\n\r\n        appInstance.setState({\r\n            [propName]: value\r\n        });\r\n    } */\r\n\r\n    render() {\r\n        const appInstance = this.props.scheduleApp;\r\n        // console.log(this.state.courses);\r\n        return (\r\n            <>\r\n            <Form.Group controlId=\"blocksInput\">\r\n                <Form.Label>Number of blocks:</Form.Label>\r\n                <Form.Control value={this.getInputValue()} onChange={this.handleChange} type=\"number\" min=\"1\"/>\r\n            </Form.Group>\r\n            <ListGroup>\r\n                {this.state.courses.map((course, index) => \r\n                    <CourseInputRow \r\n                        key={course.id}\r\n                        name={course.name}\r\n                        index={index}\r\n                        teacher={course.teacher}\r\n                        offeredBlocks={course.offeredBlocks}\r\n                        appInstance={appInstance}\r\n                    />\r\n                    )\r\n                }\r\n            </ListGroup>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nclass CourseInputRow extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.addCourse = this.addCourse.bind(this);\r\n        this.removeCourse = this.removeCourse.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.onCourseUpdate = this.onCourseUpdate.bind(this);\r\n        this.onBlockUpdate = this.onBlockUpdate.bind(this);\r\n        this.state = {\r\n            course: CoursesStore.getCourses()[this.props.index].clone(),\r\n            blocks: CoursesStore.getBlocks()\r\n        };\r\n\r\n        // console.log(this.state.course);\r\n    }\r\n\r\n    addCourse(index, appInstance) {\r\n        // appInstance.setState({\r\n        //     courses: appInstance.state.courses.slice(0, index + 1).concat(new Class(\"\", \"\", [], appInstance.ids++), appInstance.state.courses.slice(index + 1, appInstance.state.courses.length))\r\n        // });\r\n        CoursesStore.addCourse(index);\r\n    }\r\n\r\n    removeCourse(index, appInstance) {\r\n        // let newCourses = appInstance.state.courses.slice();\r\n        // newCourses.splice(index, 1);\r\n        // //console.log(index);\r\n        // appInstance.setState({\r\n        //     courses: newCourses\r\n        // });\r\n        // console.log(index);\r\n        CoursesStore.removeCourse(index);\r\n    }\r\n\r\n    handleChange(event, index, appInstance) {\r\n        // let propName = event.target.name;\r\n        // let value = appInstance.state.courses.slice();\r\n        // value[index][propName] = event.target.value;\r\n\r\n        // appInstance.setState({\r\n        //     [propName]: value\r\n        // });\r\n\r\n        // console.log(\"change\");\r\n        // console.log(event.target.name);\r\n        // console.log(event.target.value);\r\n\r\n        // console.log(this.state.course.name);\r\n\r\n        //event.target.name is set to the name of the property it corresponds to in the Class class.\r\n        CoursesStore.updateCourse(index, {\r\n            [event.target.name]: event.target.value\r\n        });\r\n\r\n    }\r\n\r\n    onCourseUpdate() {\r\n\r\n        //not a general purpose function for checking any array, just in this case where I know both are arrays (not objects or maps, for instance)\r\n        function arraysEqual(arr1, arr2) {\r\n            if (arr1.length !== arr2.length) return false;\r\n            for (const i in arr1) {\r\n                if (arr1[i] !== arr2[i]) return false;\r\n            }\r\n            return true;\r\n        }\r\n        // console.log(\"Setting Course\");\r\n        // console.log(\"Before:\" + this.state.course.name);\r\n\r\n        //check if state is same so doesn't call setState and have to go through shouldComponentUpdate\r\n        let newCourse = CoursesStore.getCourses()[this.props.index].clone();\r\n\r\n        if (newCourse.name !== this.state.course.name || newCourse.teacher !== this.state.course.teacher ||\r\n            newCourse.id !== this.state.course.id ||  !arraysEqual(newCourse.offeredBlocks, this.state.course.offeredBlocks)) {\r\n                this.setState({\r\n                    course: newCourse\r\n                });\r\n            }\r\n\r\n        // console.log(\"After:\" + this.state.course.name);\r\n        \r\n    }\r\n\r\n    onBlockUpdate() {\r\n        const newBlocks = CoursesStore.getBlocks();\r\n        if (!isNaN(newBlocks)) {\r\n            this.setState({\r\n            blocks: newBlocks\r\n        });\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        CoursesStore.subscribeUpdate(this.onCourseUpdate);\r\n        CoursesStore.subscribeBlocksChange(this.onBlockUpdate);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        CoursesStore.unsubscribeUpdate(this.onCourseUpdate);\r\n        CoursesStore.unsubscribeBlocksChange(this.onBlockUpdate);\r\n    }\r\n\r\n    /* shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.state.course.name !== nextState.course.name || this.state.course.teacher !== nextState.course.teacher ||\r\n            this.state.course.offeredBlocks !== nextState.course.offeredBlocks || nextProps.teacher !== this.props.teacher\r\n            || nextProps.offeredBlocks !== this.props.offeredBlocks || nextProps.index !== this.props.index) {\r\n            console.log(\"Different\");\r\n            return true;\r\n        }\r\n        return false;\r\n    } */\r\n\r\n    render() {\r\n\r\n        //required props:\r\n        //name, teacher, offeredBlocks, index, appInstance\r\n        const index = this.props.index;\r\n        const appInstance = this.props.appInstance;\r\n\r\n        return (\r\n            <ListGroup.Item>\r\n                    <Form.Group controlId={\"courseInput\" + index}>\r\n                        <Form.Label>Class Name</Form.Label>\r\n                        <Form.Control\r\n                            placeholder=\"Class Name\"\r\n                            name=\"name\"\r\n                            value={this.state.course.name}\r\n                            onChange={(event) => this.handleChange(event, index, appInstance)}/>\r\n                    </Form.Group>\r\n                    <Form.Group controlId={\"courseInput\" + index}>\r\n                        <Form.Label>Teacher</Form.Label>\r\n                        <Form.Control\r\n                            placeholder=\"Teacher\"\r\n                            name=\"teacher\"\r\n                            value={this.state.course.teacher}\r\n                            onChange={(event) => this.handleChange(event, index, appInstance)}/>\r\n                    </Form.Group>\r\n                {/* <form>\r\n                    <div style={{ display: \"inline-block\" }}>\r\n                        <label htmlFor=\"nameInput\" style={{marginRight: \"4px\"}}>Course Name: </label>\r\n                        <input\r\n                            id=\"nameInput\"\r\n                            className=\"courseInput\"\r\n                            placeholder=\"Class name\"\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            value={this.state.course.name}\r\n                            onChange={(event) => this.handleChange(event, index, appInstance)}\r\n                        ></input>\r\n                        <label htmlFor=\"teacherInput\" style={{marginRight: \"4px\"}}>Teacher: </label>\r\n                        <input\r\n                            id=\"teacherInput\"\r\n                            className=\"courseInput\"\r\n                            placeholder=\"Teacher\"\r\n                            type=\"text\"\r\n                            name=\"teacher\"\r\n                            value={this.state.course.teacher}\r\n                            onChange={(event) => this.handleChange(event, index, appInstance)}\r\n                        >\r\n                        </input>\r\n                    </div> */}\r\n                    <div className=\"input-button-group\">\r\n                    <ButtonGroup style={{ marginRight: \"4px\", paddingBottom: \"5px\" }}>\r\n                        <Dropdown>\r\n                            <Dropdown.Toggle variant=\"primary\">Offered Blocks</Dropdown.Toggle>\r\n                            <Dropdown.Menu style={{ padding: \"0\" }}>\r\n                                {/*<DropdownButton as={ButtonGroup} title=\"Offered Blocks\">*/}\r\n                                {/* <Dropdown.Item as=\"div\" style={{padding: \"0 !important\"}}> */}\r\n                                <ToggleButtonGroup type=\"checkbox\" vertical\r\n                                    value={this.state.course.offeredBlocks}\r\n                                    style={{ width: \"100%\" }}\r\n                                    onChange={(value, event) => {\r\n                                        /* console.log(index);\r\n                                        console.log(appInstance.state.courses[0]);\r\n                                        console.log(value); */\r\n\r\n                                        CoursesStore.updateCourse(index, {\r\n                                            offeredBlocks: value\r\n                                        });\r\n\r\n                                        /* const newCourses = appInstance.state.courses.slice();\r\n                                        newCourses[index].offeredBlocks = value;\r\n\r\n                                        appInstance.setState({\r\n                                            courses: newCourses\r\n                                        }); */\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        (new Array(this.state.blocks).fill(null)).map((_, index2) =>\r\n\r\n                                            <ToggleButton key={index2} value={index2} style={{ width: \"100%\" }}>Block {index2 + 1}</ToggleButton>\r\n                                        )\r\n                                    }\r\n                                </ToggleButtonGroup>\r\n                                {/* </Dropdown.Item> */}\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                        {/* </DropdownButton> */}\r\n                    </ButtonGroup>\r\n                    <ButtonGroup style={{ paddingBottom: \"5px\"}}>\r\n                        <Button className=\"courseListButton\" onClick={() => this.addCourse(index, appInstance)}>+</Button>\r\n                        <Button className=\"courseListButton\" onClick={() => this.removeCourse(index, appInstance)}>-</Button>\r\n                    </ButtonGroup>\r\n                    </div>\r\n                {/* </form> */}\r\n            </ListGroup.Item>\r\n        )\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <ScheduleApp />,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n//register service worker\r\nserviceWorker.register();","class Class {\r\n    constructor(name = \"\", teacher = \"\", offeredBlocks = [], id) {\r\n        this.name = name;\r\n        this.teacher = teacher;\r\n        this.offeredBlocks = offeredBlocks;\r\n        this.id = id;\r\n        this.possibleBlocks = [];\r\n\r\n        //add self to class schedules\r\n        /* for (const block of offeredBlocks) {\r\n            classTimes[block - 1].push(this);\r\n        } */\r\n    }\r\n\r\n    clone() {\r\n        return new Class(this.name, this.teacher, this.offeredBlocks, this.id);\r\n    }\r\n}\r\n\r\nmodule.exports = Class;","let EventEmitter = require(\"events\").EventEmitter;\r\n\r\nlet emitter = new EventEmitter();\r\n\r\nconst Class = require(\"./class.js\");\r\n\r\nlet ids = 0;\r\n\r\nlet blocks = 8;\r\n\r\nlet courses = [new Class(\"\", \"\", [], ids++)];\r\n\r\n//Test Schedule\r\n//Make sure it's blank in production\r\ncourses = [\r\n    new Class(\"A\", \"A\", [0, 3, 6, 7], ids++),\r\n    new Class(\"B\", \"B\", [0, 1, 2, 3, 5], ids++),\r\n    new Class(\"C\", \"C\", [0, 1, 6, 7], ids++),\r\n    new Class(\"D\", \"D\", [2, 3, 5, 6], ids++),\r\n    new Class(\"E\", \"E\", [2, 3, 4, 6], ids++),\r\n    new Class(\"F\", \"F\", [0, 1, 2, 3, 4, 5, 6, 7], ids++),\r\n    new Class(\"G\", \"G\", [0, 1, 2, 3, 4], ids++),\r\n    new Class(\"H\", \"H\", [0, 1, 2, 6, 7], ids++),\r\n/*     new Class(\"A\", \"A\", [0], ids++),\r\n    new Class(\"B\", \"B\", [1], ids++),\r\n    new Class(\"C\", \"C\", [2], ids++),\r\n    new Class(\"D\", \"D\", [3], ids++),\r\n    new Class(\"E\", \"E\", [4], ids++),\r\n    new Class(\"F\", \"F\", [5], ids++),\r\n    new Class(\"G\", \"G\", [6], ids++),\r\n    new Class(\"H\", \"H\", [7], ids++), */\r\n\r\n];\r\n\r\n\r\n\r\n\r\n\r\nmodule.exports = {\r\n    getCourses: function() {\r\n        //objects inside are same.\r\n        //Don't modify them outside\r\n        return courses.slice();\r\n    },\r\n    subscribeUpdate: function(callback) {\r\n        emitter.addListener(\"update\", callback);\r\n    },\r\n    unsubscribeUpdate: function(callback) {\r\n        emitter.removeListener(\"update\", callback);\r\n    },\r\n    updateCourse: function(index, newValues) {\r\n        for (const prop in newValues) {\r\n            courses[index][prop] = newValues[prop];\r\n        }\r\n\r\n        emitter.emit(\"update\");\r\n    },\r\n    subscribeAddRemove: function(callback) {\r\n        emitter.addListener(\"addRemove\", callback);\r\n    },\r\n    unsubscribeAddRemove: function(callback) {\r\n        emitter.removeListener(\"addRemove\", callback);\r\n    },\r\n    addCourse: function(index) {\r\n        courses = courses.slice(0, index + 1).concat(new Class(\"\", \"\", [], ids++), courses.slice(index + 1, courses.length));\r\n        emitter.emit(\"addRemove\");\r\n    },\r\n    removeCourse: function(index) {\r\n        let coursesCopy = courses.slice();\r\n        coursesCopy.splice(index, 1);\r\n        courses = coursesCopy;\r\n        emitter.emit(\"addRemove\");\r\n    },\r\n    subscribeBlocksChange: function(callback) {\r\n        emitter.addListener(\"blocksChange\", callback);\r\n    },\r\n    unsubscribeBlocksChange: function(callback) {\r\n        emitter.removeListener(\"blocksChange\", callback);\r\n    },\r\n    getBlocks: function() {\r\n        return blocks;\r\n    },\r\n    changeBlocks: function(newBlocks) {\r\n        if (newBlocks !== blocks) {\r\n            blocks = newBlocks;\r\n            emitter.emit(\"blocksChange\");\r\n        }\r\n    }\r\n\r\n}"],"sourceRoot":""}