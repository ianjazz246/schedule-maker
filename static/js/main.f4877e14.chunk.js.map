{"version":3,"sources":["serviceWorker.js","class.js","CoursesStore.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Class","name","arguments","length","undefined","teacher","offeredBlocks","id","Object","classCallCheck","this","possibleBlocks","emitter","EventEmitter","require","ids","numBlocks","courses","CoursesStore","getCourses","slice","subscribeUpdate","callback","addListener","unsubscribeUpdate","removeListener","updateCourse","index","newValues","save","prop","localStorage","setItem","JSON","stringify","emit","subscribeAddRemove","unsubscribeAddRemove","addCourse","concat","removeCourse","coursesCopy","splice","setCourses","newCourses","subscribeNumBlocksChange","unsubscribeNumBlocksChange","getNumBlocks","setNumBlocks","newNumBlocks","getNextId","resetIds","ScheduleApp","props","_this","possibleConstructorReturn","getPrototypeOf","call","makeSchedules","bind","assertThisInitialized","prepareSchedule","scheduleDisplayRouteRender","schedules","blocks","classes","classTimes","numOfBlocks","reservedBlocks","i","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","c","value","includes","block","push","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","classesInBlock","err","return","blocksPossibleClasses","possibleSchedules","map","val","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","aClass","removals","n","m","indexOf","noSchedule","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","partialPossibleSchedules","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","partialSchedule","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","entries","_blocksPossibleClasse","_ref3","_ref2","slicedToArray","el","apply","toConsumableArray","react_default","a","createElement","src_ScheduleDisplay","_this2","react_router_dom","basename","Navbar","bg","Brand","Nav","variant","defaultActiveKey","lib","style","cursor","to","Item","className","onSelect","key","setState","react_router","exact","path","render","component","CourseInput","savedCourses","parse","getItem","savedNumBlocks","parsedCourses","element","React","Component","ScheduleDisplay","data","columns","errorAlert","Alert","Heading","isNaN","_loop","Header","borderRight","accessor","d","es","padding","defaultSorted","desc","filterable","SubComponent","row","flex","width","maxWidth","wordWrap","original","_this3","onAddRemove","handleChange","handleNumBlocksChange","nextProps","nextState","event","parseInt","target","forceUpdate","removeItem","appInstance","scheduleApp","Fragment","position","paddingLeft","Form","Group","controlId","Label","Control","getInputValue","onChange","type","min","Button","onClick","handleRemoveAllButton","top","transform","marginLeft","ListGroup","course","src_CourseInputRow","CourseInputRow","_this4","onCourseUpdate","onBlockUpdate","clone","defineProperty","newCourse","arr1","arr2","arraysEqual","newBlocks","_this5","placeholder","ButtonGroup","marginRight","paddingBottom","Dropdown","Toggle","Menu","ToggleButtonGroup","vertical","Array","fill","_","index2","ToggleButton","ReactDOM","src_ScheduleApp","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f4877e14.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","class Class {\r\n    constructor(name = \"\", teacher = \"\", offeredBlocks = [], id) {\r\n        this.name = name;\r\n        this.teacher = teacher;\r\n        this.offeredBlocks = offeredBlocks;\r\n        this.id = id;\r\n        this.possibleBlocks = [];\r\n\r\n        //add self to class schedules\r\n        /* for (const block of offeredBlocks) {\r\n            classTimes[block - 1].push(this);\r\n        } */\r\n    }\r\n\r\n    clone() {\r\n        return new Class(this.name, this.teacher, this.offeredBlocks, this.id);\r\n    }\r\n}\r\n\r\nexport default Class;","import Class from \"./class.js\";\r\n\r\nlet EventEmitter = require(\"events\").EventEmitter;\r\n\r\nlet emitter = new EventEmitter();\r\n\r\nlet ids = 0;\r\n\r\nlet numBlocks = 8;\r\n\r\nlet courses = [new Class(\"\", \"\", [], ids++)];\r\n\r\n//Test Schedule\r\n//Make sure it's blank in production\r\ncourses = [\r\n    new Class(\"\", \"\", [], 0)\r\n    /* new Class(\"A\", \"A\", [0, 3, 6, 7], ids++),\r\n    new Class(\"B\", \"B\", [0, 1, 2, 3, 5], ids++),\r\n    new Class(\"C\", \"C\", [0, 1, 6, 7], ids++),\r\n    new Class(\"D\", \"D\", [2, 3, 5, 6], ids++),\r\n    new Class(\"E\", \"E\", [2, 3, 4, 6], ids++),\r\n    new Class(\"F\", \"F\", [0, 1, 2, 3, 4, 5, 6, 7], ids++),\r\n    new Class(\"G\", \"G\", [0, 1, 2, 3, 4], ids++),\r\n    new Class(\"H\", \"H\", [0, 1, 2, 6, 7], ids++), */\r\n\r\n];\r\n\r\n\r\n\r\n\r\n\r\nexport default {\r\n    getCourses: function() {\r\n        //objects inside are same.\r\n        //Don't modify them outside\r\n        return courses.slice();\r\n    },\r\n    subscribeUpdate: function(callback) {\r\n        emitter.addListener(\"update\", callback);\r\n    },\r\n    unsubscribeUpdate: function(callback) {\r\n        emitter.removeListener(\"update\", callback);\r\n    },\r\n    updateCourse: function(index, newValues, save=true) {\r\n        for (const prop in newValues) {\r\n            courses[index][prop] = newValues[prop];\r\n        }\r\n        if (save) {\r\n            localStorage.setItem(\"courses\", JSON.stringify(courses));\r\n        }\r\n        emitter.emit(\"update\");\r\n    },\r\n    subscribeAddRemove: function(callback) {\r\n        emitter.addListener(\"addRemove\", callback);\r\n    },\r\n    unsubscribeAddRemove: function(callback) {\r\n        emitter.removeListener(\"addRemove\", callback);\r\n    },\r\n    addCourse: function(index, save=true) {\r\n        courses = courses.slice(0, index + 1).concat(new Class(\"\", \"\", [], ids++), courses.slice(index + 1, courses.length));\r\n        if (save) {\r\n            localStorage.setItem(\"courses\", JSON.stringify(courses));\r\n        }\r\n        \r\n        emitter.emit(\"addRemove\");\r\n    },\r\n    removeCourse: function(index, save=true) {\r\n        let coursesCopy = courses.slice();\r\n        coursesCopy.splice(index, 1);\r\n        courses = coursesCopy;\r\n        if (save) {\r\n            localStorage.setItem(\"courses\", JSON.stringify(courses));\r\n        }\r\n        \r\n        emitter.emit(\"addRemove\");\r\n    },\r\n    setCourses: function(newCourses, save=true) {\r\n        courses = newCourses;\r\n        emitter.emit(\"addRemove\");\r\n        if (save) {\r\n            localStorage.setItem(\"courses\", JSON.stringify(courses));\r\n        }\r\n    },\r\n    subscribeNumBlocksChange: function(callback) {\r\n        emitter.addListener(\"numBlocks\", callback);\r\n    },\r\n    unsubscribeNumBlocksChange: function(callback) {\r\n        emitter.removeListener(\"numBlocks\", callback);\r\n    },\r\n    getNumBlocks: function() {\r\n        return numBlocks;\r\n    },\r\n    //TODO: Rename to better\r\n    setNumBlocks: function(newNumBlocks, save=true) {\r\n        if (newNumBlocks !== numBlocks) {\r\n            numBlocks = newNumBlocks;\r\n            emitter.emit(\"numBlocks\");\r\n        }\r\n        if (save) {\r\n            localStorage.setItem(\"numBlocks\", newNumBlocks);\r\n        }\r\n    },\r\n    getNextId: function() {\r\n        return ids++;\r\n    },\r\n    resetIds: function() {\r\n        ids = 0;\r\n    }\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\n\r\nimport { LinkContainer, IndexLinkContainer } from 'react-router-bootstrap';\r\n\r\nimport { ListGroup, ButtonGroup, Button, Dropdown, ToggleButton, ToggleButtonGroup, Alert, Navbar, Nav, Form } from \"react-bootstrap\";\r\n\r\n//Import react-table\r\nimport ReactTable from \"react-table\";\r\n// import \"react-table/react-table.css\";\r\n\r\nimport \"./index.css\";\r\n// import \"./schedule.js\";\r\n\r\n//import service worker for progressive web app\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport Class from \"./class.js\";\r\n\r\n//Datastore\r\nimport CoursesStore from \"./CoursesStore.js\";\r\n// const CoursesStore = require(\"./CoursesStore.js\");\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass ScheduleApp extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.makeSchedules = this.makeSchedules.bind(this);\r\n        this.prepareSchedule = this.prepareSchedule.bind(this);\r\n        this.scheduleDisplayRouteRender = this.scheduleDisplayRouteRender.bind(this);\r\n        // this.ids = 0;\r\n\r\n        //to remove\r\n        //should use CourseStore or other stuff\r\n        this.state = {\r\n            schedules: [],\r\n            // courses: [new Class(\"A\", \"A\", [0, 3], this.ids++), new Class(\"B\", \"B\", [0, 2, 3], this.ids++), new Class(\"C\", \"C\", [0, 1], this.ids++), new Class(\"D\", \"D\", [2, 3], this.ids++)],\r\n            blocks: 4,\r\n            //reservedBlocks: []\r\n            //make use of reservedBlocks to increase efficiency\r\n        };\r\n\r\n\r\n    }\r\n\r\n    prepareSchedule(classes) {\r\n        //Prepare schedules\r\n        let classTimes = [];\r\n        let numOfBlocks = CoursesStore.getNumBlocks();\r\n        classTimes.length = numOfBlocks;\r\n\r\n        let reservedBlocks = [];\r\n\r\n        //need to manually fill it\r\n        for (let i = 0; i < numOfBlocks; ++i) {\r\n            classTimes[i] = [];\r\n        }\r\n\r\n        for (let c of classes) {\r\n            if (c.offeredBlocks.length < 2) {\r\n                //Two classes only available at same time\r\n                if (reservedBlocks.includes(c.offeredBlocks[0])) {\r\n                    //Add handle error \r\n                    // console.log(\"No possible schedule\");\r\n                    break;\r\n                }\r\n\r\n                let block = c.offeredBlocks[0];\r\n                reservedBlocks.push(block);\r\n\r\n                //possibleBlocks currently not used\r\n                c.possibleBlocks.push(block);\r\n            }\r\n\r\n            for (let block of c.offeredBlocks) {\r\n                // console.log(block);\r\n                if (!reservedBlocks.includes(block)) {\r\n                    c.possibleBlocks.push(block);\r\n                }\r\n\r\n                let classesInBlock = classTimes[block];\r\n\r\n                if (classesInBlock !== undefined) {\r\n                    classesInBlock.push(c);\r\n                }\r\n            }\r\n        }\r\n\r\n        /* for (let classes of classTimes) {\r\n            //if one block has only one class available, \r\n            if (classes.length < 2) {\r\n\r\n            }\r\n        } */\r\n\r\n        // console.log(classTimes);\r\n        return classTimes;\r\n    }\r\n\r\n    makeSchedules(blocksPossibleClasses) {\r\n\r\n        let possibleSchedules = [];\r\n\r\n        //if only one block in blocksArray, then have reached end of recursion. Return values.\r\n        if (blocksPossibleClasses.length < 2) {\r\n\r\n            //Create array with each class in a separate index\r\n            return blocksPossibleClasses[0].map(val => [val]);\r\n        }\r\n        else {\r\n            for (let aClass of blocksPossibleClasses[0]) {\r\n\r\n                //nested array of removals from each block in blocksPossibleClasses\r\n                let removals = [];\r\n                removals.length = blocksPossibleClasses.length;\r\n                for (let i = 0, n = blocksPossibleClasses.length; i < n; ++i) {\r\n                    removals[i] = [];\r\n                }\r\n\r\n                // let classPossibleSchedules = [];\r\n\r\n                //make deep copy of blocksPossibleClasses\r\n                //let tempPossibleSchedules = JSON.parse(JSON.stringify(blocksPossibleClasses));\r\n\r\n                //for each block, remove all occurances of the current class in the current block\r\n                //skipping current block.\r\n                for (let i = 1, n = blocksPossibleClasses.length; i < n; ++i) {\r\n                    let m;\r\n                    while ((m = blocksPossibleClasses[i].indexOf(aClass)) !== -1) {\r\n                        removals[i].push(aClass);\r\n                        blocksPossibleClasses[i].splice(m, 1);\r\n                    }\r\n                }\r\n\r\n                //flag for whether shedule is impossible with the current class\r\n                let noSchedule = false;\r\n                for (let block of blocksPossibleClasses) {\r\n                    if (block.length < 1) {\r\n                        noSchedule = true;\r\n                        // break;\r\n                    }\r\n                }\r\n\r\n                if (noSchedule) {\r\n                }\r\n                else {\r\n                    let partialPossibleSchedules = this.makeSchedules(blocksPossibleClasses.slice(1));\r\n\r\n                    //iterate through the returned possible schedules\r\n                    for (let partialSchedule of partialPossibleSchedules) {\r\n                        possibleSchedules.push([aClass].concat(partialSchedule));\r\n                    }\r\n\r\n\r\n\r\n                    //possibleSchedules.push(makeSchedules(blocksPossibleClasses.slice(1), currSchedule.push(block)));\r\n                }\r\n\r\n                //add back in the removed classes\r\n                for (const [i, el] of removals.entries()) {\r\n                        //need to modify original blocksPossibleClasses\r\n\r\n                        //blocksPossibleClasses[i] = blocksPossibleClasses[i].concat(el);\r\n                        blocksPossibleClasses[i].push(...el);                    \r\n                }\r\n                removals = [];\r\n            }\r\n            return possibleSchedules;\r\n        }\r\n\r\n    }\r\n\r\n    scheduleDisplayRouteRender() {\r\n        return (<ScheduleDisplay schedules={this.state.schedules} />)\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.state.courses);\r\n        return (\r\n            <BrowserRouter\r\n                basename=\"/schedule-maker\" \r\n            >\r\n                <Navbar bg=\"light\">\r\n                    <Navbar.Brand>Schedule Maker</Navbar.Brand>\r\n                    <Nav variant=\"tabs\" defaultActiveKey=\"/\">\r\n                        {/* <Nav.Item> */}\r\n                            <IndexLinkContainer style={{cursor: \"pointer\"}} to=\"/\">\r\n                                <Nav.Item className=\"nav-link\">Enter Classes</Nav.Item>\r\n                            </IndexLinkContainer>\r\n                        {/* </Nav.Item> */}\r\n                        \r\n                        \r\n                            {/* <Nav.Item  */}\r\n                                {/* > */}\r\n                                    <LinkContainer style={{cursor: \"pointer\"}} to=\"/output/\">\r\n                                        <Nav.Item\r\n                                            className=\"nav-link\"\r\n                                            onSelect={(key) => {\r\n                                                if (key === \"output\") {\r\n                                                    let classes = this.prepareSchedule(CoursesStore.getCourses());\r\n                                                    // console.log(classes);\r\n                                                    let schedules = this.makeSchedules(classes);\r\n\r\n\r\n                                                    // this.setState({\r\n                                                    //     schedules: this.makeSchedules(classes)\r\n                                                    // });\r\n\r\n                                                    // console.log(schedules);\r\n\r\n                                                    this.setState({\r\n                                                        schedules\r\n                                                    });\r\n                                                }\r\n                                            }}\r\n                                        >\r\n                                            View Schedules\r\n                                        </Nav.Item>\r\n                                        </LinkContainer>\r\n                                {/* </Nav.Item> */}\r\n                        \r\n                    </Nav>\r\n\r\n                </Navbar>\r\n                {/* <Tabs\r\n                    \r\n                >\r\n                    <Tab eventKey=\"input\" title=\"Input\">\r\n                        <CourseInput courses={this.state.courses} scheduleApp={this} />\r\n                    </Tab>\r\n                    <Tab eventKey=\"output\" title=\"Output\">\r\n                        <ScheduleDisplay schedules={this.state.schedules} scheduleApp={this} />\r\n                    </Tab>\r\n                </Tabs> */}\r\n                <Route exact path=\"/output/\" render={this.scheduleDisplayRouteRender} />\r\n                <Route exact path=\"/\" component={CourseInput} />\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n\r\n    componentWillMount() {\r\n        //get saved courses, if any, and display them\r\n        const savedCourses = JSON.parse(localStorage.getItem(\"courses\"));\r\n        const savedNumBlocks = localStorage.getItem(\"numBlocks\");\r\n        if (savedCourses && savedCourses.length > 0) {\r\n            let parsedCourses = savedCourses.map(element => new Class(element.name, element.teacher, element.offeredBlocks, ));\r\n            CoursesStore.setCourses(parsedCourses);\r\n        }\r\n\r\n        if (typeof(savedNumBlocks) === \"number\") {\r\n            CoursesStore.setNumBlocks(savedNumBlocks);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/* function ScheduleRow(props) {\r\n    return (\r\n        <>\r\n            {console.log(props)}\r\n            {global.schedules.map(element => (\r\n                <td>\r\n                    {element[props.block].name}\r\n                </td>\r\n            ))}\r\n        </>\r\n    )\r\n} */\r\n\r\nclass ScheduleDisplay extends React.Component {\r\n    /* constructor(props) {\r\n        super(props);\r\n    } */\r\n\r\n    render() {\r\n        //let headerArray = [];\r\n\r\n        //create table headers\r\n        /* for (let i = 0; i < global.numOfBlocks; ++i) {\r\n            headerArray.push(\r\n                <div>{i}</div>\r\n            );\r\n        } */\r\n\r\n        /* let tableHeaderArray = new Array(global.numOfBlocks).fill(null);\r\n        //create table headers\r\n        for (let i = 0; i < global.numOfBlocks; ++i) {\r\n            tableHeaderArray.push(\r\n                <tr>\r\n                    <th class=\"header\">{i}</th>\r\n                    <ScheduleRow block={i} />\r\n                </tr>\r\n            );\r\n        } */\r\n\r\n\r\n        /* let tempColumns = [];\r\n        for (let i = 1; i < global.numOfBlocks; ++i) {\r\n            //add column header for each block\r\n            tempColumns.push({\r\n                id: \"block\" + i,\r\n                Header: \"\",\r\n                accessor: d => d[i]\r\n            });\r\n        } */\r\n\r\n        /* function processData(data) {\r\n            let tempData = [];\r\n\r\n            for (let i = 0; i < global.numOfBlocks; ++i) {\r\n                //add block number beginning to each row\r\n                tempData.push([i + 1]);\r\n            }\r\n\r\n\r\n            for (let schedule of data) {\r\n                for (let [index, course] of schedule.entries()) {\r\n                    tempData[index].push(course.name);\r\n                }\r\n            }\r\n\r\n            return tempData;\r\n        } */\r\n\r\n\r\n\r\n        const data = this.props.schedules;\r\n        // const appInstance = this.props.scheduleApp;\r\n\r\n        let columns = [];\r\n\r\n        const blocks = CoursesStore.getNumBlocks();\r\n\r\n        let errorAlert = (\r\n            <Alert variant=\"danger\">\r\n                <Alert.Heading>Unable to create schedule</Alert.Heading>\r\n                <p>There are no possible schedules from your classes. Make sure you have at least {blocks} classes. If you believe this is a mistake, please leave an bug report on Github.</p>\r\n            </Alert>\r\n        );\r\n\r\n        if (isNaN(blocks)) {\r\n            return errorAlert;\r\n        }\r\n\r\n        for (let i = 0; i < blocks; ++i) {\r\n            columns.push(\r\n                /* {\r\n                    Header: \"Block \" + (i + 1),\r\n                    id: \"block\" + (i + 1),\r\n                    // accessor: d => d[i].name,\r\n                    columns: [{\r\n                        id: \"class\" + (i + 1),\r\n                        Header: \"Class\",\r\n                        accessor: d => d[i].name\r\n                    },\r\n                    {\r\n                        id: \"teacher\" + (i + 1),\r\n                        Header: \"Teacher\",\r\n                        style: {borderRight: \"1px solid rgba(0, 0, 0, 0.2\"},\r\n                        aggregate: (values, rows) => values.length,\r\n                        Aggregated: row => {\r\n                            return (\r\n                                <span>\r\n                                    ({row.value})\r\n                                </span>\r\n                            )\r\n                        },\r\n                        accessor: d => d[i].teacher\r\n                    }]\r\n                } */\r\n                {\r\n                    id: \"class\" + (i + 1),\r\n                    Header: \"Block \" + (i + 1),\r\n                    style: {borderRight: \"1px solid rgba(0, 0, 0, 0.2\"},\r\n                    accessor: d => d[i].name\r\n                }\r\n            )\r\n        }\r\n\r\n\r\n        /* const columns = [{\r\n            Header: \"\",\r\n            fixed: \"left\",\r\n            columns: [\r\n                {\r\n                    id: \"header\",\r\n                    Header: \"Block\",\r\n                    width: 80,\r\n                    accessor: d => d[0]\r\n                }\r\n            ]\r\n        }].concat({Header:\"Classes\",\r\n            headerClassName: \"classes-header-group\",\r\n            columns: tempColumns}); */\r\n\r\n\r\n        const DEFAULT_SORT = [\r\n            {\r\n                id: \"block1\",\r\n                desc: false\r\n            }\r\n        ];\r\n\r\n        if (data.length < 1) {\r\n            return errorAlert;\r\n        }\r\n        else {\r\n            return (\r\n                <ReactTable\r\n                    style={{ padding: \"10px\"}}\r\n                    data={data}\r\n                    columns={columns}\r\n                    className=\"-striped -highlight\"\r\n                    defaultSorted={DEFAULT_SORT}\r\n                    filterable={true}\r\n                    SubComponent={row => {\r\n                        return (\r\n                            <div className=\"rt-tr\">\r\n                            <div className=\"rt-td\" style={{flex: \"35 0 auto\", width: \"35px\", maxWidth: \"35px\", wordWrap: \"break-word\"}}>Teacher</div>\r\n                                {row.original.map((val , index) =>\r\n                                    <div key={index} className=\"rt-td\" style={{flex: \"100 0 auto\", width: \"100px\"}}>{val.teacher}</div>\r\n                                )}\r\n                            </div>\r\n                        )\r\n                    }}\r\n                />\r\n            )\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        /* return (\r\n            <>\r\n            <div class=\"header\">\r\n                {headerArray}\r\n            </div>\r\n            {global.schedules.map(element => (\r\n            <div class=\"schedule\">\r\n                <Schedule classes={element}></Schedule>\r\n            </div>))}\r\n            </>\r\n        ) */\r\n\r\n\r\n        /* return (\r\n            <div class=\"tableContainer\">\r\n                <Table striped hover>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th class=\"header\">Block</th>\r\n                            <td class=\"invisibleHeader\">B</td>\r\n                            <td></td>\r\n                            <td></td>\r\n                        </tr>\r\n                        {tableHeaderArray}\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        ) */\r\n\r\n\r\n    }\r\n}\r\n\r\nclass CourseInput extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // this.addCourse = this.addCourse.bind(this);\r\n        // this.removeCourse = this.removeCourse.bind(this);\r\n        this.state = {\r\n            courses: CoursesStore.getCourses()\r\n        };\r\n        console.log(this.state.courses);\r\n        this.onAddRemove = this.onAddRemove.bind(this);\r\n        this.handleChange = this.handleNumBlocksChange.bind(this);\r\n    }\r\n\r\n    onAddRemove() {\r\n        const newCourses = CoursesStore.getCourses();\r\n        console.log(newCourses);\r\n        this.setState({\r\n            courses: newCourses\r\n        });\r\n        console.log(this.state.courses);\r\n    }\r\n \r\n    componentWillMount() {\r\n        CoursesStore.subscribeAddRemove(this.onAddRemove);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (nextState.courses.length !== this.state.courses.length) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    handleNumBlocksChange(event) {\r\n        // let newValue = parseInt(event.target.value);\r\n        CoursesStore.setNumBlocks(parseInt(event.target.value));\r\n        this.forceUpdate();\r\n    }\r\n\r\n    getInputValue() {\r\n        let n;\r\n        if (isNaN((n = CoursesStore.getNumBlocks()))) {\r\n                return \"\";\r\n        }\r\n        return n;\r\n    }\r\n\r\n    handleRemoveAllButton() {\r\n        CoursesStore.setCourses([new Class(\"\", \"\", [], CoursesStore.getNextId())]);\r\n        localStorage.removeItem(\"courses\");\r\n    }\r\n\r\n    /* addCourse(index, appInstance) {\r\n        appInstance.setState({\r\n            courses: appInstance.state.courses.slice(0, index + 1).concat(new Class(\"\", \"\", [], appInstance.ids++), appInstance.state.courses.slice(index + 1, appInstance.state.courses.length))\r\n        });\r\n    }\r\n\r\n    /*removeCourse(index, appInstance) {\r\n        let newCourses = appInstance.state.courses.slice();\r\n        newCourses.splice(index, 1);\r\n        //console.log(index);\r\n        appInstance.setState({\r\n            courses: newCourses\r\n        });\r\n    }\r\n\r\n    handleOnChange(event, index, appInstance) {\r\n\r\n        let propName = event.target.name;\r\n        let value = appInstance.state.courses.slice();\r\n        value[index][propName] = event.target.value;\r\n\r\n        appInstance.setState({\r\n            [propName]: value\r\n        });\r\n    } */\r\n\r\n    render() {\r\n        const appInstance = this.props.scheduleApp;\r\n        // console.log(this.state.courses);\r\n        return (\r\n            <>\r\n            <div style={{position: \"relative\", paddingLeft: \"1.25rem\"}}>\r\n            <Form.Group controlId=\"blocksInput\">\r\n                <Form.Label>Number of blocks:</Form.Label>\r\n                <Form.Control value={this.getInputValue()} onChange={this.handleNumBlocksChange} type=\"number\" min=\"1\"/>\r\n            </Form.Group>\r\n            <Button variant=\"primary\" onClick={this.handleRemoveAllButton}\r\n                style={{position: \"absolute\", top: \"50%\", transform: \"translateY(calc(-50% + 0.5rem))\",marginLeft: \"4px\"}}>\r\n                Remove all\r\n            </Button>\r\n            </div>\r\n            <ListGroup>\r\n                {\r\n                    this.state.courses.map((course, index) => \r\n                    <CourseInputRow \r\n                        key={course.id}\r\n                        name={course.name}\r\n                        index={index}\r\n                        teacher={course.teacher}\r\n                        offeredBlocks={course.offeredBlocks}\r\n                        appInstance={appInstance}\r\n                    />\r\n                    )\r\n                }\r\n            </ListGroup>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nclass CourseInputRow extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.addCourse = this.addCourse.bind(this);\r\n        this.removeCourse = this.removeCourse.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.onCourseUpdate = this.onCourseUpdate.bind(this);\r\n        this.onBlockUpdate = this.onBlockUpdate.bind(this);\r\n        this.state = {\r\n            course: CoursesStore.getCourses()[this.props.index].clone(),\r\n            blocks: CoursesStore.getNumBlocks()\r\n        };\r\n\r\n        // console.log(this.state.course);\r\n    }\r\n\r\n    addCourse(index, appInstance) {\r\n        // appInstance.setState({\r\n        //     courses: appInstance.state.courses.slice(0, index + 1).concat(new Class(\"\", \"\", [], appInstance.ids++), appInstance.state.courses.slice(index + 1, appInstance.state.courses.length))\r\n        // });\r\n        CoursesStore.addCourse(index);\r\n    }\r\n\r\n    removeCourse(index, appInstance) {\r\n        // let newCourses = appInstance.state.courses.slice();\r\n        // newCourses.splice(index, 1);\r\n        // //console.log(index);\r\n        // appInstance.setState({\r\n        //     courses: newCourses\r\n        // });\r\n        // console.log(index);\r\n        CoursesStore.removeCourse(index);\r\n    }\r\n\r\n    handleChange(event, index, appInstance) {\r\n        // let propName = event.target.name;\r\n        // let value = appInstance.state.courses.slice();\r\n        // value[index][propName] = event.target.value;\r\n\r\n        // appInstance.setState({\r\n        //     [propName]: value\r\n        // });\r\n\r\n        // console.log(\"change\");\r\n        // console.log(event.target.name);\r\n        // console.log(event.target.value);\r\n\r\n        // console.log(this.state.course.name);\r\n\r\n        //event.target.name is set to the name of the property it corresponds to in the Class class.\r\n        CoursesStore.updateCourse(index, {\r\n            [event.target.name]: event.target.value\r\n        });\r\n\r\n    }\r\n\r\n    onCourseUpdate() {\r\n\r\n        //not a general purpose function for checking any array, just in this case where I know both are arrays (not objects or maps, for instance)\r\n        function arraysEqual(arr1, arr2) {\r\n            if (arr1.length !== arr2.length) return false;\r\n            for (const i in arr1) {\r\n                if (arr1[i] !== arr2[i]) return false;\r\n            }\r\n            return true;\r\n        }\r\n        // console.log(\"Setting Course\");\r\n        // console.log(\"Before:\" + this.state.course.name);\r\n\r\n        //check if state is same so doesn't call setState and have to go through shouldComponentUpdate\r\n        let newCourse = CoursesStore.getCourses()[this.props.index].clone();\r\n\r\n        if (newCourse.name !== this.state.course.name || newCourse.teacher !== this.state.course.teacher ||\r\n            newCourse.id !== this.state.course.id ||  !arraysEqual(newCourse.offeredBlocks, this.state.course.offeredBlocks)) {\r\n                this.setState({\r\n                    course: newCourse\r\n                });\r\n            }\r\n\r\n        // console.log(\"After:\" + this.state.course.name);\r\n        \r\n    }\r\n\r\n    onBlockUpdate() {\r\n        const newBlocks = CoursesStore.getNumBlocks();\r\n        if (!isNaN(newBlocks)) {\r\n            this.setState({\r\n            blocks: newBlocks\r\n        });\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        CoursesStore.subscribeUpdate(this.onCourseUpdate);\r\n        CoursesStore.subscribeNumBlocksChange(this.onBlockUpdate);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        CoursesStore.unsubscribeUpdate(this.onCourseUpdate);\r\n        CoursesStore.unsubscribeNumBlocksChange(this.onBlockUpdate);\r\n    }\r\n\r\n    /* shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.state.course.name !== nextState.course.name || this.state.course.teacher !== nextState.course.teacher ||\r\n            this.state.course.offeredBlocks !== nextState.course.offeredBlocks || nextProps.teacher !== this.props.teacher\r\n            || nextProps.offeredBlocks !== this.props.offeredBlocks || nextProps.index !== this.props.index) {\r\n            console.log(\"Different\");\r\n            return true;\r\n        }\r\n        return false;\r\n    } */\r\n\r\n    render() {\r\n\r\n        //required props:\r\n        //name, teacher, offeredBlocks, index, appInstance\r\n        const index = this.props.index;\r\n        const appInstance = this.props.appInstance;\r\n\r\n        return (\r\n            <ListGroup.Item>\r\n                    <Form.Group controlId={\"courseInput\" + index}>\r\n                        <Form.Label>Class Name</Form.Label>\r\n                        <Form.Control\r\n                            placeholder=\"Class Name\"\r\n                            name=\"name\"\r\n                            value={this.state.course.name}\r\n                            onChange={(event) => this.handleChange(event, index, appInstance)}/>\r\n                    </Form.Group>\r\n                    <Form.Group controlId={\"courseInput\" + index}>\r\n                        <Form.Label>Teacher</Form.Label>\r\n                        <Form.Control\r\n                            placeholder=\"Teacher\"\r\n                            name=\"teacher\"\r\n                            value={this.state.course.teacher}\r\n                            onChange={(event) => this.handleChange(event, index, appInstance)}/>\r\n                    </Form.Group>\r\n                {/* <form>\r\n                    <div style={{ display: \"inline-block\" }}>\r\n                        <label htmlFor=\"nameInput\" style={{marginRight: \"4px\"}}>Course Name: </label>\r\n                        <input\r\n                            id=\"nameInput\"\r\n                            className=\"courseInput\"\r\n                            placeholder=\"Class name\"\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            value={this.state.course.name}\r\n                            onChange={(event) => this.handleChange(event, index, appInstance)}\r\n                        ></input>\r\n                        <label htmlFor=\"teacherInput\" style={{marginRight: \"4px\"}}>Teacher: </label>\r\n                        <input\r\n                            id=\"teacherInput\"\r\n                            className=\"courseInput\"\r\n                            placeholder=\"Teacher\"\r\n                            type=\"text\"\r\n                            name=\"teacher\"\r\n                            value={this.state.course.teacher}\r\n                            onChange={(event) => this.handleChange(event, index, appInstance)}\r\n                        >\r\n                        </input>\r\n                    </div> */}\r\n                    <div className=\"input-button-group\">\r\n                    <ButtonGroup style={{ marginRight: \"4px\", paddingBottom: \"5px\" }}>\r\n                        <Dropdown>\r\n                            <Dropdown.Toggle variant=\"primary\">Offered Blocks</Dropdown.Toggle>\r\n                            <Dropdown.Menu style={{ padding: \"0\" }}>\r\n                                {/*<DropdownButton as={ButtonGroup} title=\"Offered Blocks\">*/}\r\n                                {/* <Dropdown.Item as=\"div\" style={{padding: \"0 !important\"}}> */}\r\n                                <ToggleButtonGroup type=\"checkbox\" vertical\r\n                                    value={this.state.course.offeredBlocks}\r\n                                    style={{ width: \"100%\" }}\r\n                                    onChange={(value, event) => {\r\n                                        /* console.log(index);\r\n                                        console.log(appInstance.state.courses[0]);\r\n                                        console.log(value); */\r\n\r\n                                        CoursesStore.updateCourse(index, {\r\n                                            offeredBlocks: value\r\n                                        });\r\n\r\n                                        /* const newCourses = appInstance.state.courses.slice();\r\n                                        newCourses[index].offeredBlocks = value;\r\n\r\n                                        appInstance.setState({\r\n                                            courses: newCourses\r\n                                        }); */\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        (new Array(this.state.blocks).fill(null)).map((_, index2) =>\r\n\r\n                                            <ToggleButton key={index2} value={index2} style={{ width: \"100%\" }}>Block {index2 + 1}</ToggleButton>\r\n                                        )\r\n                                    }\r\n                                </ToggleButtonGroup>\r\n                                {/* </Dropdown.Item> */}\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                        {/* </DropdownButton> */}\r\n                    </ButtonGroup>\r\n                    <ButtonGroup style={{ paddingBottom: \"5px\"}}>\r\n                        <Button className=\"courseListButton\" onClick={() => this.addCourse(index, appInstance)}>+</Button>\r\n                        <Button className=\"courseListButton\"\r\n                                onClick={() => CoursesStore.getCourses().length < 2 ? CoursesStore.updateCourse(index, {name: \"\", teacher: \"\", offeredBlocks: []}) :\r\n                                this.removeCourse(index, appInstance)}\r\n                        >-\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                    </div>\r\n                {/* </form> */}\r\n            </ListGroup.Item>\r\n        )\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <ScheduleApp />,\r\n    document.getElementById(\"root\")\r\n);\r\n// export default ScheduleApp;\r\n\r\n//register service worker\r\nserviceWorker.register();"],"sourceRoot":""}